#!/usr/bin/env node


var q = require('q');
var nopt = require('nopt');

var Report = require('../src/model/report');

var Supervisor = require('../src/util/supervisor');


function execute(pipeline, supervisor) {
    return pipeline.reduce(function(res, op) {
        // return res.then(op);
        return res.then(function(r) {
            return op(r, supervisor);
        });
    }, q([]));
}

function outputReports(resources) {
    // FIXME: use partition instead?
    var reports = resources.filter(function(output) {
        return output instanceof Report;
    });

    reports.forEach(function(report) {
        console.log("written to", report.writtenResource.absolute());
    });

    return resources.filter(function(output) {
        return ! (output instanceof Report);
    });
}

function warnRemainingResources(resources) {
    if (resources.length > 0) {
        console.log(resources.length + ' unprocessed resources:');
        resources.forEach(function(other) {
            console.log(other.filename());
        });
    }
}

function run(pipeline, supervisor) {
    var operations = pipeline.concat(
        outputReports,
        warnRemainingResources
    );
    return execute(operations, supervisor);
}


var cwd = process.cwd();
var spec = require(cwd + '/Pipeline.js');

var pipelines = {};

spec(pipelines);

var cli = nopt({watch: Boolean}, {w: '--watch'}, process.argv, 2);

var pipelineArgs = cli.argv.remain;
if (pipelineArgs.length === 0) {
    // Run all pipelines
    pipelineArgs = Object.keys(pipelines);
}

pipelineArgs.forEach(function(pipelineArg) {
    var pipeline = pipelines[pipelineArg];
    if (! pipeline) {
        throw new Error('Pipeline not defined: ' + pipelineArg);
    }

    console.log("Run pipeline: " + pipelineArg);

    var supervisor = new Supervisor();
    var output = run(pipeline, supervisor);

    // Report errors if any
    output.catch(function(err) {
        console.log("Luigi failed: ", err.stack);
    });

    if (cli.watch) {
        output.then(function() {
            var gaze = require('gaze');
            gaze(supervisor.includes, function() {
                this.on('all', function(event, filepath) {
                    run(pipeline, supervisor);
                });
            });
        });
    }
});
